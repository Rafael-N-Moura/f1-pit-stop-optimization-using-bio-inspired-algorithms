#!/usr/bin/env python3
"""
Script principal para otimiza√ß√£o de par√¢metros e an√°lise estat√≠stica.
"""

import sys
import os
import json
from datetime import datetime

# Adicionar src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.parameter_optimizer import optimize_ga_parameters, optimize_aco_parameters
from src.statistical_analyzer import run_statistical_study


def create_results_directory():
    """
    Cria diret√≥rio de resultados se n√£o existir.
    """
    if not os.path.exists('results'):
        os.makedirs('results')
        print("üìÅ Diret√≥rio 'results' criado")


def load_optimized_params(scenario):
    """
    Carrega par√¢metros otimizados se existirem, sen√£o otimiza.
    
    Args:
        scenario: Dicion√°rio com cen√°rio
        
    Returns:
        Tupla com par√¢metros otimizados (ga_params, aco_params)
    """
    ga_filename = f"results/ga_optimization_{scenario['year']}_{scenario['race_name'].replace(' ', '_')}_{scenario['driver_code']}.json"
    aco_filename = f"results/aco_optimization_{scenario['year']}_{scenario['race_name'].replace(' ', '_')}_{scenario['driver_code']}.json"
    
    ga_params = None
    aco_params = None
    
    # Tentar carregar par√¢metros otimizados do GA
    if os.path.exists(ga_filename):
        try:
            with open(ga_filename, 'r') as f:
                data = json.load(f)
                ga_params = data.get('best_params')
                print(f"‚úÖ Par√¢metros otimizados do GA carregados de: {ga_filename}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao carregar par√¢metros do GA: {e}")
    
    # Tentar carregar par√¢metros otimizados do ACO
    if os.path.exists(aco_filename):
        try:
            with open(aco_filename, 'r') as f:
                data = json.load(f)
                aco_params = data.get('best_params')
                print(f"‚úÖ Par√¢metros otimizados do ACO carregados de: {aco_filename}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao carregar par√¢metros do ACO: {e}")
    
    # Otimizar se necess√°rio
    if ga_params is None:
        print("\nüîß Otimizando par√¢metros do Algoritmo Gen√©tico...")
        ga_params = optimize_ga_parameters(scenario)
    
    if aco_params is None:
        print("\nüîß Otimizando par√¢metros do Algoritmo ACO...")
        aco_params = optimize_aco_parameters(scenario)
    
    return ga_params, aco_params


def main():
    """
    Fun√ß√£o principal para executar otimiza√ß√£o e an√°lise estat√≠stica.
    """
    print("üéØ Iniciando Otimiza√ß√£o de Par√¢metros e An√°lise Estat√≠stica")
    print("=" * 60)
    
    # Criar diret√≥rio de resultados
    create_results_directory()
    
    # Definir cen√°rio de teste
    scenario = {
        'year': 2024,
        'race_name': 'Spain Grand Prix',
        'driver_code': 'HAM'
    }
    
    print(f"üìä Cen√°rio: {scenario['year']} {scenario['race_name']} - {scenario['driver_code']}")
    print()
    
    # Carregar ou otimizar par√¢metros
    ga_params, aco_params = load_optimized_params(scenario)
    
    if not ga_params or not aco_params:
        print("‚ùå Erro: N√£o foi poss√≠vel obter par√¢metros otimizados")
        return
    
    print("\nüìã Par√¢metros Otimizados:")
    print(f"   GA: {ga_params}")
    print(f"   ACO: {aco_params}")
    print()
    
    # Executar estudo estat√≠stico
    print("üìà Iniciando An√°lise Estat√≠stica...")
    print("=" * 40)
    
    try:
        # Executar com 30 execu√ß√µes por algoritmo (pode ser reduzido para testes)
        n_executions = 30  # Reduzir para 10-15 se demorar muito
        
        report = run_statistical_study(scenario, ga_params, aco_params, n_executions)
        
        # Exibir resumo dos resultados
        if 'summary' in report:
            summary = report['summary']
            print("\nüìä RESUMO DOS RESULTADOS")
            print("=" * 40)
            print(f"üéØ Melhor Algoritmo: {summary['better_algorithm']}")
            print(f"üìà Melhoria: {summary['improvement_percent']:.2f}%")
            print()
            print("üìä Performance GA:")
            print(f"   Tempo m√©dio: {summary['ga_performance']['mean_time']:.2f}s")
            print(f"   Desvio padr√£o: {summary['ga_performance']['std_time']:.2f}s")
            print(f"   CV: {summary['ga_performance']['cv_time']:.2f}%")
            print()
            print("üìä Performance ACO:")
            print(f"   Tempo m√©dio: {summary['aco_performance']['mean_time']:.2f}s")
            print(f"   Desvio padr√£o: {summary['aco_performance']['std_time']:.2f}s")
            print(f"   CV: {summary['aco_performance']['cv_time']:.2f}%")
        
        if 'recommendations' in report:
            print("\nüí° RECOMENDA√á√ïES")
            print("=" * 20)
            for i, rec in enumerate(report['recommendations'], 1):
                print(f"{i}. {rec}")
        
        if 'statistical_tests' in report:
            tests = report['statistical_tests']
            if 'comparison' in tests:
                comp = tests['comparison']
                print(f"\nüî¨ TESTES ESTAT√çSTICOS")
                print("=" * 30)
                print(f"Diferen√ßa significativa: {'Sim' if comp['significant_difference'] else 'N√£o'}")
                if 'effect_size' in tests:
                    effect = tests['effect_size']
                    print(f"Tamanho do efeito: {effect['cohens_d']:.3f} ({effect['interpretation']})")
        
        print(f"\n‚úÖ An√°lise conclu√≠da com sucesso!")
        print(f"üìÅ Resultados salvos em: results/")
        
    except Exception as e:
        print(f"‚ùå Erro durante an√°lise estat√≠stica: {e}")
        import traceback
        traceback.print_exc()


def run_quick_test():
    """
    Executa teste r√°pido com menos execu√ß√µes para verifica√ß√£o.
    """
    print("üß™ Executando Teste R√°pido...")
    
    scenario = {
        'year': 2024,
        'race_name': 'Spain Grand Prix',
        'driver_code': 'HAM'
    }
    
    # Usar par√¢metros padr√£o para teste r√°pido
    ga_params = {
        'population_size': 30,
        'generations': 50,
        'mutation_rate': 0.1,
        'crossover_rate': 0.8,
        'elitism_size': 3
    }
    
    aco_params = {
        'num_ants': 20,
        'iterations': 30,
        'evaporation_rate': 0.1,
        'alpha': 1.0,
        'beta': 2.0
    }
    
    # Executar com apenas 5 execu√ß√µes por algoritmo
    report = run_statistical_study(scenario, ga_params, aco_params, n_executions=5)
    
    print("‚úÖ Teste r√°pido conclu√≠do!")


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='Otimiza√ß√£o de Par√¢metros e An√°lise Estat√≠stica')
    parser.add_argument('--quick', action='store_true', help='Executar teste r√°pido')
    
    args = parser.parse_args()
    
    if args.quick:
        run_quick_test()
    else:
        main() 